#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2018-2024 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import os
import re
import sys
import threading
import types

import gammu

0_0  # Python >= 3.6 is required

def dial(ctxt, n):
    def callback(sm, cb_type, data):
        nonlocal reply
        if cb_type != 'USSD':
            raise RuntimeError(f'unexpected callback type: {cb_type}')
        reply = dict(data)
    if ctxt.debug:
        print('>>>', n)
    sm = ctxt.sm
    sm.SetIncomingUSSD()
    sm.SetIncomingCallback(callback)
    try:
        sm.DialService(n)
        reply = None
        while reply is None:
            sm.ReadDevice()
        return reply
    finally:
        sm.SetIncomingCallback(None)

networks = [
    'pl-t-mobile',
    'pl-play',
    'pl-lyca',
]

class TameGammuLogging(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        sys.stdout.flush()
        stdout_fd = sys.stdout.fileno()
        self.__stdout_fd = os.dup(stdout_fd)
        (pipe_r_fd, pipe_w_fd) = os.pipe()
        os.dup2(pipe_w_fd, stdout_fd)
        os.close(pipe_w_fd)
        self.__pipe_fd = open(pipe_r_fd, 'rb', buffering=0)

    def run(self):
        for line in self.__pipe_fd:
            if line.startswith(b'python-gammu: WARNING: Adding USSD to queue, position '):
                continue
            os.write(self.__stdout_fd, line)

    def close(self):
        sys.stdout.flush()
        os.close(sys.stdout.fileno())

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('-c', '--config')
    ap.add_argument('-n', '--network', required=True, choices=networks)
    ap.add_argument('--variant', type=int, default=0)
    ap.add_argument('--debug', action='store_true')
    options = ap.parse_args()
    sm = gammu.StateMachine()
    kwargs = {}
    if options.config is not None:
        kwargs.update(Filename=options.config)
    sm.ReadConfig(**kwargs)
    sm.Init()
    do = globals()['do_' + options.network.replace('-', '_')]
    ctxt = types.SimpleNamespace(
        sm=sm,
        ap=ap,
        variant=options.variant,
        debug=options.debug,
    )
    tgl = TameGammuLogging()
    tgl.start()
    try:
        do(ctxt)
    finally:
        tgl.close()

def simple_dial(ctxt, n):
    reply = dial(ctxt, n)
    text = reply['Text']
    text = text.rstrip()
    print(text)
    if reply['Status'] == 'NoActionNeeded':
        return
    else:
        raise NotImplementedError('unexpected status: {st}'.format(st=reply['Status']))

def dial_140(ctxt):
    # PL T-Mobile
    vdict = {
        0: '*140*1##',
        1: '*140*296*1#',
        25: '*140*265*1#',
        30: '*150*150*1#',
    }
    try:
        no = vdict[ctxt.variant]
    except KeyError:
        ctxt.ap.error(f'unknown variant {ctxt.variant}')
    reply = dial(ctxt, no)
    while True:
        text = reply['Text']
        text = text.rstrip() + '\n'
        lines = text.splitlines()
        text = re.sub(r'^[0-9]+([.] )?[.] (Dalej|Powrot|Koniec)\n|^\n', '', text + '\n', flags=re.MULTILINE)
        text = re.sub(r'(?<=[.])Szczegoly na www[.]t-mobile[.]pl$', '', text, flags=re.MULTILINE)
        print(text, end='')
        status = reply['Status']
        if status == 'NoActionNeeded':
            return
        elif status == 'ActionNeeded':
            pass
        else:
            raise NotImplementedError('unexpected status: {st}'.format(st=reply['Status']))
        if '1. . Dalej' in lines:
            reply = dial(ctxt, '1')
            continue
        if '3. . Koniec' in lines:
            reply = dial(ctxt, '3')
            continue
        if '9. Koniec' in lines:
            reply = dial(ctxt, '9')
            continue
        raise NotImplementedError

def do_pl_t_mobile(ctxt):
    simple_dial(ctxt, '*101#')
    dial_140(ctxt)

def do_pl_play(ctxt):
    simple_dial(ctxt, '*101#')
    simple_dial(ctxt, '*107#')

def do_pl_lyca(ctxt):
    simple_dial(ctxt, '*131#')
    simple_dial(ctxt, '*137#')

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
